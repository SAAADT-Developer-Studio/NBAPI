// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: teams.sql

package sqlc

import (
	"context"
)

const getTeam = `-- name: GetTeam :one
select
  abbr, fullname
from
  team
where
  abbr = $1
`

func (q *Queries) GetTeam(ctx context.Context, abbr string) (Team, error) {
	row := q.db.QueryRow(ctx, getTeam, abbr)
	var i Team
	err := row.Scan(&i.Abbr, &i.Fullname)
	return i, err
}

const getTeamPer100Possesions = `-- name: GetTeamPer100Possesions :many
select per_100_possesions.id, per_100_possesions.fg, per_100_possesions.fga, per_100_possesions.p3, per_100_possesions.pa3, per_100_possesions.p2, per_100_possesions.pa2, per_100_possesions.ft, per_100_possesions.fta, per_100_possesions.orb, per_100_possesions.drb, per_100_possesions.trb, per_100_possesions.stl, per_100_possesions.blk, per_100_possesions.ast, per_100_possesions.tov, per_100_possesions.pf, per_100_possesions.pts, per_100_possesions.o_rtg, per_100_possesions.d_rtg from team
  inner join team_per_100_possesions on team.abbr = team_per_100_possesions.team_abbr
  inner join per_100_possesions on team_per_100_possesions.per_100_id = per_100_possesions.id
  where team.abbr = $1
`

func (q *Queries) GetTeamPer100Possesions(ctx context.Context, abbr string) ([]Per100Possesion, error) {
	rows, err := q.db.Query(ctx, getTeamPer100Possesions, abbr)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Per100Possesion
	for rows.Next() {
		var i Per100Possesion
		if err := rows.Scan(
			&i.ID,
			&i.Fg,
			&i.Fga,
			&i.P3,
			&i.Pa3,
			&i.P2,
			&i.Pa2,
			&i.Ft,
			&i.Fta,
			&i.Orb,
			&i.Drb,
			&i.Trb,
			&i.Stl,
			&i.Blk,
			&i.Ast,
			&i.Tov,
			&i.Pf,
			&i.Pts,
			&i.ORtg,
			&i.DRtg,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamPerGame = `-- name: GetTeamPerGame :many
select per_game.id, per_game.mp, per_game.fg, per_game.fga, per_game.fg_percent, per_game.p3, per_game.pa3, per_game.p_percent3, per_game.p2, per_game.pa2, per_game.p_percent2, per_game.efg_percent, per_game.ft, per_game.fta, per_game.ft_percent, per_game.orb, per_game.drb, per_game.trb, per_game.ast, per_game.stl, per_game.blk, per_game.tov, per_game.pf, per_game.pts from team
  inner join team_per_game on team.abbr = team_per_game.team_abbr
  inner join per_game on team_per_game.per_game_id = per_game.id
  where team.abbr = $1
`

func (q *Queries) GetTeamPerGame(ctx context.Context, abbr string) ([]PerGame, error) {
	rows, err := q.db.Query(ctx, getTeamPerGame, abbr)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PerGame
	for rows.Next() {
		var i PerGame
		if err := rows.Scan(
			&i.ID,
			&i.Mp,
			&i.Fg,
			&i.Fga,
			&i.FgPercent,
			&i.P3,
			&i.Pa3,
			&i.PPercent3,
			&i.P2,
			&i.Pa2,
			&i.PPercent2,
			&i.EfgPercent,
			&i.Ft,
			&i.Fta,
			&i.FtPercent,
			&i.Orb,
			&i.Drb,
			&i.Trb,
			&i.Ast,
			&i.Stl,
			&i.Blk,
			&i.Tov,
			&i.Pf,
			&i.Pts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamTotals = `-- name: GetTeamTotals :many
select totals.id, totals.gp, totals.gs, totals.mp, totals.fg, totals.fga, totals.p3, totals.pa3, totals.p2, totals.pa2, totals.ft, totals.fta, totals.orb, totals.drb, totals.trb, totals.stl, totals.blk, totals.ast, totals.tov, totals.pf, totals.pts from team
  inner join team_totals on team.abbr = team_totals.team_abbr
  inner join totals on team_totals.total_id = totals.id
  where team.abbr = $1
`

func (q *Queries) GetTeamTotals(ctx context.Context, abbr string) ([]Total, error) {
	rows, err := q.db.Query(ctx, getTeamTotals, abbr)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Total
	for rows.Next() {
		var i Total
		if err := rows.Scan(
			&i.ID,
			&i.Gp,
			&i.Gs,
			&i.Mp,
			&i.Fg,
			&i.Fga,
			&i.P3,
			&i.Pa3,
			&i.P2,
			&i.Pa2,
			&i.Ft,
			&i.Fta,
			&i.Orb,
			&i.Drb,
			&i.Trb,
			&i.Stl,
			&i.Blk,
			&i.Ast,
			&i.Tov,
			&i.Pf,
			&i.Pts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeams = `-- name: GetTeams :many
select
  abbr, fullname
from
  team
where
  lower(fullname) like '%' || lower($1) || '%'
`

func (q *Queries) GetTeams(ctx context.Context, lower string) ([]Team, error) {
	rows, err := q.db.Query(ctx, getTeams, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(&i.Abbr, &i.Fullname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
